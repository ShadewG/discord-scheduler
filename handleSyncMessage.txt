async function handleSyncMessage(msg) {
  // Create a reply function that suppresses notifications
  const quietReply = async (content) => {
    try {
      let replyOptions = typeof content === 'string' 
        ? { content, flags: [1 << 2] } // 1 << 2 is SUPPRESS_EMBEDS flag
        : { ...content, flags: [1 << 2] };
      
      return await msg.reply(replyOptions);
    } catch (err) {
      // Fallback to regular reply if something goes wrong
      logToFile(`Error sending quiet reply: ${err.message}`);
      return await msg.reply(content);
    }
  };
  
  const code = projectCode(msg.channel.name);
  if (!code) {
    await quietReply('No project code detected in channel name.');
    return;
  }

  // Get the first 50 messages to look for images
  const messages = await msg.channel.messages.fetch({ limit: 50 });
  const firstImageUrl = findFirstImageUrl(Array.from(messages.values()));

  // Check for dry run flag
  const isDryRun = msg.content.includes('--dry');
  const dryRunPrefix = isDryRun ? '[DRY RUN] ' : '';
  
  // Remove dry run flag from the text
  const userText = msg.content.slice(TRIGGER_PREFIX.length).trim().replace('--dry', '').trim();
  if (!userText && !isNewPage) return;

  // Check for URLs directly in the user message
  let directFrameioLink = null;
  let directScriptLink = null;

  try {
    directFrameioLink = extractFrameioLink(userText);
    if (directFrameioLink) {
      logToFile(`🔗 Found Frame.io link directly in user message: ${directFrameioLink}`);
    }
    
    directScriptLink = extractScriptLink(userText);
    if (directScriptLink) {
      logToFile(`🔗 Found script link directly in user message: ${directScriptLink}`);
    }
  } catch (error) {
    logToFile(`⚠️ Error checking for direct links: ${error.message}`);
  }

  // Find the Notion page for this project
  let pageId = await findPage(code);
  let isNewPage = false;
  
  // If no page exists, create one
  if (!pageId) {
    await quietReply(`${dryRunPrefix}Creating new Notion page for project code "${code}"...`);
    
    // Create a new page with the channel name as the title
    if (!isDryRun) {
      pageId = await createNotionPage(code, msg.channel.name, {}, firstImageUrl);
      
      if (!pageId) {
        await quietReply('❌ Failed to create Notion page. Check logs for details.');
        return;
      }
    } else {
      logToFile(`💧 DRY RUN: Would create new Notion page for project "${code}"`);
    }
    
    isNewPage = true;
  }

  try {
    // Get current date in ISO format
    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format

    const gpt = await openai.chat.completions.create({
      model: 'gpt-4o',
      temperature: 0,
      messages: [
        { role: 'system', content: ANALYSIS_SYSTEM_PROMPT },
        // Few-shot examples
        { role: 'user', content: '!sync Project is in VA render. Ray will do final cut.' },
        { role: 'assistant', function_call: { 
          name: 'update_properties',
          arguments: JSON.stringify({ status: 'VA Render', editor: ['Ray'] })
        }},
        { role: 'user', content: '!sync Suki owns it now. Due 12 Apr.' },
        { role: 'assistant', function_call: { 
          name: 'update_properties',
          arguments: JSON.stringify({ project_owner: 'Suki', due_date: '2025-04-12' })
        }},
        // New example showing latest link wins
        { role: 'user', content: '!sync Here is our Frame.io: https://f.io/abc123. [Later] Actually use this updated Frame.io link: https://f.io/xyz789.' },
        { role: 'assistant', function_call: { 
          name: 'update_properties',
          arguments: JSON.stringify({ frameio_url: 'https://f.io/xyz789' })
        }},
